package com.dsa.techInterview;

public class NoOfIsland {

    public int numOfIsland(char[][] grid){

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int numOfIsland = 0;

        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    dfsNoOfIslan(grid, i,j,visited);
                    numOfIsland++;
                }
            }
        }
        return numOfIsland;
    }

    public void dfsNoOfIslan(char[][] grid, int row, int col, boolean[][] visited){

        if(row<0 || col<0 ||
                row >= grid.length ||
                col >= grid[0].length ||
                visited[row][col] ||
                grid[row][col]=='0'){
            return;
        }

        visited[row][col]=true;
        dfsNoOfIslan(grid,row,col-1,visited);  //left
        dfsNoOfIslan(grid,row-1,col,visited);  //up
        dfsNoOfIslan(grid,row,col+1,visited);   //right
        dfsNoOfIslan(grid,row+1,col,visited);  //down
    }

    public int maxArea(char[][] grid){

        int m = grid.length;
        int n = grid[0].length;
        int maxAreaV = 0;
        boolean[][] visited = new boolean[m][n];

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    maxAreaV = Math.max(maxAreaV, dfsMaxAreaIsland(grid,i,j,visited));
                }
            }
        }
        return maxAreaV;
    }

    public int dfsMaxAreaIsland(char[][] grid,int row, int col,  boolean[][] visited){

        if(row < 0 || col < 0 ||
                row >= grid.length ||
                col >= grid[row].length ||
                grid[row][col] == '0' ||
                visited[row][col]){
            return 0;
        }

        int count = 1;
        visited[row][col] = true;

        count = count + dfsMaxAreaIsland(grid,row,col+1, visited);
        count = count + dfsMaxAreaIsland(grid,row,col-1, visited);
        count = count + dfsMaxAreaIsland(grid,row+1,col, visited);
        count = count + dfsMaxAreaIsland(grid,row-1,col, visited);

        return count;
    }


    public static void main(String[] args) {

        char[][] grid = {{'1','1','0','1'},
                {'1','0','0','0'},
                {'1','1','1','1'},
                {'0','0','0','1'}};


        NoOfIsland noOfIsland = new NoOfIsland();
        int island = noOfIsland.numOfIsland(grid);

        System.out.println("No of Island: "+ island);

        System.out.println();
        int islandMaxArea = noOfIsland.maxArea(grid);
        System.out.println("Max Area of Island: "+islandMaxArea);

    }
}
